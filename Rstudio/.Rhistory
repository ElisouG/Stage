<<<<<<< HEAD
# knitr::opts_chunk$set(echo=TRUE, eval=TRUE, cache=TRUE, message=FALSE, warning=FALSE, comment="")
library(knitr)
options(width=300)
knitr::opts_chunk$set(
fig.width = 10,
fig.height = 5,
fig.path='figures/',
fig.align = "center",
size = "tiny",
echo = TRUE, eval=TRUE,
warning = FALSE, message = FALSE,
results = TRUE, comment = "")
# knitr::asis_output("\\footnotesize")
source("https://bioconductor.org/biocLite.R")
if(!require("recount")){
biocLite("recount")
}
if(!require("DESeq22")){
install.packages("lazyeval")
install.packages("ggplot2")
biocLite("DESeq2")
}
if(!require("dismo")){
install.packages("dismo")
}
library("DESeq2")
if(!require("gplots")){
install.packages("gplots")
}
if (!require('gProfileR')) {
install.packages("gProfileR")
}
dir.util <- 'http://pedagogix-tagc.univ-mrs.fr/courses/statistics_bioinformatics/R-files/util/'
source(file.path(dir.util, "util_student_test_multi.R"))
library("recount")
library("gplots")
library("gProfileR")
library('knitr')
library('MASS')
library('dismo')
library('class')
project_id <- 'SRP041538'
download_study( project = project_id, type = 'rse-gene', download = T)
load("SRP041538/rse_gene.Rdata")
data <- round(assays(rse_gene)$counts,0)
pheno <- lapply(split(colData(rse_gene), seq_len(nrow(colData(rse_gene)))), geo_characteristics)
pheno <- do.call(rbind, lapply(pheno, function(x) {
if('cells' %in% colnames(x)) {
colnames(x)[colnames(x) == 'cells'] <- 'cell.line'
return(x)
} else {
return(x)
}
}))
pheno <- data.frame(pheno$disease.state)
data.pheno <- cbind(pheno,t(data))
data.normal <- data.pheno[data.pheno$pheno.disease.state == 'Normal',2:ncol(data.pheno)]
data.COPD <- data.pheno[data.pheno$pheno.disease.state == 'COPD',2:ncol(data.pheno)]
pheno <- data.frame(c(rep('Normal',nrow(data.normal)), rep('COPD',nrow(data.COPD))))
colnames(pheno) <- 'disease.state'
data <- t(rbind(data.normal,data.COPD))
col.pheno <- c("Normal"="blue","COPD"="red")
pheno$color <- col.pheno[as.vector(pheno$disease.state)] # attribue des couleurs aux phenotypes
par(mfrow=c(1,2))
barplot(colSums(data)/1000000,
main="Barplot1 : Nombre de reads totaux \n par échantillon (en million)",
col=pheno$color,
las=1,  horiz=TRUE,
ylab="Echantillons", cex.names=0.5,
xlab="Nombre de reads") # Crée un barplot qui permet de visualiser le nombre de read par échantillon
#On enleve les gènes ayant pas d'expression du jeux de données
prop.null <- apply(data, 2, function(x) 100*mean(x==0))
barplot(prop.null, main="Barplot2: Pourcentage d'in-exression \n par échantillon",
horiz=TRUE, cex.names=0.5, las=1,
col=pheno$color, ylab='Echantillons', xlab="pourcentage d'in-expression") # Observation du nombre du pourcentage de gène ayant 0 read par échanttillon
data <- data[rowSums(data) > 0,] # On enlève les gènes avec 0 échantillons
nb.replicates <- 25
Normal <- sample(1:91, size=nb.replicates, replace=FALSE)
COPD <- sample(92:187, size=nb.replicates, replace=FALSE)
selected.samples <- c(Normal, COPD)
col.pheno.selected <- pheno$color[selected.samples]
DEseq.result <- DESeqDataSetFromMatrix(countData = data[,selected.samples], colData = pheno[selected.samples,], design = ~ disease.state)
result.norm <-  estimateSizeFactors(DEseq.result)
epsilon <- 1 # pseudo-valeur qui permet de régler le problème du log2(0)
par(mfrow=c(1,2))
boxplot(log2(counts(result.norm)+epsilon),  col=col.pheno.selected, cex.axis=0.7,
las=1, xlab="log2(reads)", horizontal=TRUE, main="Données brutes")
boxplot(log2(counts(result.norm, normalized=TRUE)+epsilon),  col=col.pheno.selected, cex.axis=0.7,
las=1, xlab="log2(reads normalisés)", horizontal=TRUE, main="Données normalisées")
result.disp <- estimateDispersions(result.norm)
par(mfrow=c(1,2))
plotDispEsts(result.disp, xlab = 'moyenne des reads normalisé', ylab = 'dispersion', legend = T)
alpha <- 0.0001
wald.test <- nbinomWaldTest(result.disp)
res.DESeq2 <- results(wald.test, alpha=alpha, pAdjustMethod="BH")
hist(res.DESeq2$padj, breaks=20, col="grey", main="DESeq2 distribution de la p-valeur", xlab="DESeq2 P-valeur", ylab="Nombre de gène")
alpha <- 0.001 # Threshold on the adjusted p-value
cols <- densCols(res.DESeq2$log2FoldChange, -log10(res.DESeq2$pvalue))
par(mfrow=c(1,2))
plot(res.DESeq2$log2FoldChange, -log10(res.DESeq2$padj), col=cols, panel.first=grid(),
main="Volcano plot", xlab="Effect size: log2(fold-change)", ylab="-log10(p-valeur ajustée)",
pch=20, cex=0.6)
abline(v=0)
abline(v=c(-2,2), col="brown")
abline(h=-log10(alpha), col="brown")
gn.selected <- abs(res.DESeq2$log2FoldChange) > 2 & res.DESeq2$padj < alpha
text(res.DESeq2$log2FoldChange[gn.selected],
-log10(res.DESeq2$padj)[gn.selected],
lab=rownames(res.DESeq2)[gn.selected ], cex=0.4)
gn.most.sign <- rownames(res.DESeq2)[1]
gn.most.diff.val <- counts(result.norm, normalized=T)[gn.most.sign,]
#barplot(gn.most.diff.val, col=col.pheno.selected, main=gn.most.sign, las=2, cex.names=0.5)
plotMA(res.DESeq2, colNonSig = "blue")
abline(h=c(-2,2), col="red")
gene.kept <- rownames(res.DESeq2)[res.DESeq2$padj <= alpha & !is.na(res.DESeq2$padj)]
data.kept <- log2(data + epsilon)[gene.kept, ]
heatmap.2(as.matrix(data.kept),
scale="row",
hclust=function(x) hclust(x,method="average"),
distfun=function(x) as.dist((1-cor(t(x)))/2),
trace="none",
density="none",
labRow="",
cexCol=0.7)
alpha <- 0.001 # Threshold on the adjusted p-value
cols <- densCols(res.DESeq2$log2FoldChange, -log10(res.DESeq2$pvalue))
par(mfrow=c(1,2))
plot(res.DESeq2$log2FoldChange, -log10(res.DESeq2$padj), col=cols, panel.first=grid(),
main="Volcano plot", xlab="Effect size: log2(fold-change)", ylab="-log10(p-valeur ajustée)",
pch=20, cex=0.6)
abline(v=0)
abline(v=c(-2,2), col="brown")
abline(h=-log10(alpha), col="brown")
gn.selected <- abs(res.DESeq2$log2FoldChange) > 4 & res.DESeq2$padj < alpha
text(res.DESeq2$log2FoldChange[gn.selected],
-log10(res.DESeq2$padj)[gn.selected],
lab=rownames(res.DESeq2)[gn.selected ], cex=0.4)
gn.most.sign <- rownames(res.DESeq2)[1]
gn.most.diff.val <- counts(result.norm, normalized=T)[gn.most.sign,]
#barplot(gn.most.diff.val, col=col.pheno.selected, main=gn.most.sign, las=2, cex.names=0.5)
plotMA(res.DESeq2, colNonSig = "blue")
abline(h=c(-2,2), col="red")
gene.kept <- rownames(res.DESeq2)[res.DESeq2$padj <= alpha & !is.na(res.DESeq2$padj)]
data.kept <- log2(data + epsilon)[gene.kept, ]
heatmap.2(as.matrix(data.kept),
scale="row",
hclust=function(x) hclust(x,method="average"),
distfun=function(x) as.dist((1-cor(t(x)))/2),
trace="none",
density="none",
labRow="",
cexCol=0.7)
alpha <- 0.001 # Threshold on the adjusted p-value
cols <- densCols(res.DESeq2$log2FoldChange, -log10(res.DESeq2$pvalue))
par(mfrow=c(1,2))
plot(res.DESeq2$log2FoldChange, -log10(res.DESeq2$padj), col=cols, panel.first=grid(),
main="Volcano plot", xlab="Effect size: log2(fold-change)", ylab="-log10(p-valeur ajustée)",
pch=20, cex=0.6)
abline(v=0)
abline(v=c(-2,2), col="brown")
abline(h=-log10(alpha), col="brown")
gn.selected <- abs(res.DESeq2$log2FoldChange) > 6 & res.DESeq2$padj < alpha
text(res.DESeq2$log2FoldChange[gn.selected],
-log10(res.DESeq2$padj)[gn.selected],
lab=rownames(res.DESeq2)[gn.selected ], cex=0.4)
gn.most.sign <- rownames(res.DESeq2)[1]
gn.most.diff.val <- counts(result.norm, normalized=T)[gn.most.sign,]
#barplot(gn.most.diff.val, col=col.pheno.selected, main=gn.most.sign, las=2, cex.names=0.5)
plotMA(res.DESeq2, colNonSig = "blue")
abline(h=c(-2,2), col="red")
alpha <- 0.001 # Threshold on the adjusted p-value
cols <- densCols(res.DESeq2$log2FoldChange, -log10(res.DESeq2$pvalue))
par(mfrow=c(1,2))
plot(res.DESeq2$log2FoldChange, -log10(res.DESeq2$padj), col=cols, panel.first=grid(),
main="Volcano plot", xlab="Effect size: log2(fold-change)", ylab="-log10(p-valeur ajustée)",
pch=20, cex=0.6)
abline(v=0)
abline(v=c(-2,2), col="brown")
abline(h=-log10(alpha), col="brown")
gn.selected <- abs(res.DESeq2$log2FoldChange) > 6 & res.DESeq2$padj < alpha
text(res.DESeq2$log2FoldChange[gn.selected],
-log10(res.DESeq2$padj)[gn.selected],
lab=rownames(res.DESeq2)[gn.selected ], cex=0.4)
gn.most.sign <- rownames(res.DESeq2)[1]
gn.most.diff.val <- counts(result.norm, normalized=T)[gn.most.sign,]
#barplot(gn.most.diff.val, col=col.pheno.selected, main=gn.most.sign, las=2, cex.names=0.5)
plotMA(res.DESeq2, colNonSig = "blue")
abline(h=c(-3,3), col="red")
gene.kept <- rownames(res.DESeq2)[res.DESeq2$padj <= alpha & !is.na(res.DESeq2$padj)]
data.kept <- log2(data + epsilon)[gene.kept, ]
heatmap.2(as.matrix(data.kept),
scale="row",
hclust=function(x) hclust(x,method="average"),
distfun=function(x) as.dist((1-cor(t(x)))/2),
trace="none",
density="none",
labRow="",
cexCol=0.7)
alpha <- 0.001 # Threshold on the adjusted p-value
cols <- densCols(res.DESeq2$log2FoldChange, -log10(res.DESeq2$pvalue))
par(mfrow=c(1,2))
plot(res.DESeq2$log2FoldChange, -log10(res.DESeq2$padj), col=cols, panel.first=grid(),
main="Volcano plot", xlab="Effect size: log2(fold-change)", ylab="-log10(p-valeur ajustée)",
pch=20, cex=0.6)
abline(v=0)
abline(v=c(-2,2), col="brown")
abline(h=-log10(alpha), col="brown")
gn.selected <- abs(res.DESeq2$log2FoldChange) > 4 & res.DESeq2$padj < alpha
text(res.DESeq2$log2FoldChange[gn.selected],
-log10(res.DESeq2$padj)[gn.selected],
lab=rownames(res.DESeq2)[gn.selected ], cex=0.4)
gn.most.sign <- rownames(res.DESeq2)[1]
gn.most.diff.val <- counts(result.norm, normalized=T)[gn.most.sign,]
#barplot(gn.most.diff.val, col=col.pheno.selected, main=gn.most.sign, las=2, cex.names=0.5)
plotMA(res.DESeq2, colNonSig = "blue")
abline(h=c(-3,3), col="red")
alpha <- 0.001 # Threshold on the adjusted p-value
cols <- densCols(res.DESeq2$log2FoldChange, -log10(res.DESeq2$pvalue))
par(mfrow=c(1,2))
plot(res.DESeq2$log2FoldChange, -log10(res.DESeq2$padj), col=cols, panel.first=grid(),
main="Volcano plot", xlab="Effect size: log2(fold-change)", ylab="-log10(p-valeur ajustée)",
pch=20, cex=0.6)
abline(v=0)
abline(v=c(-2,2), col="brown")
abline(h=-log10(alpha), col="brown")
gn.selected <- abs(res.DESeq2$log2FoldChange) > 4 & res.DESeq2$padj < alpha
text(res.DESeq2$log2FoldChange[gn.selected],
-log10(res.DESeq2$padj)[gn.selected],
lab=rownames(res.DESeq2)[gn.selected ], cex=0.4)
gn.most.sign <- rownames(res.DESeq2)[1]
gn.most.diff.val <- counts(result.norm, normalized=T)[gn.most.sign,]
#barplot(gn.most.diff.val, col=col.pheno.selected, main=gn.most.sign, las=2, cex.names=0.5)
plotMA(res.DESeq2, colNonSig = "blue")
abline(h=c(-2,2), col="red")
gene.kept <- rownames(res.DESeq2)[res.DESeq2$padj <= alpha & !is.na(res.DESeq2$padj)]
data.kept <- log2(data + epsilon)[gene.kept, ]
heatmap.2(as.matrix(data.kept),
scale="row",
hclust=function(x) hclust(x,method="average"),
distfun=function(x) as.dist((1-cor(t(x)))/2),
trace="none",
density="none",
labRow="",
cexCol=0.7)
# knitr::opts_chunk$set(echo=TRUE, eval=TRUE, cache=TRUE, message=FALSE, warning=FALSE, comment="")
library(knitr)
options(width=300)
knitr::opts_chunk$set(
fig.width = 10,
fig.height = 5,
fig.path='figures/',
fig.align = "center",
size = "tiny",
echo = TRUE, eval=TRUE,
warning = FALSE, message = FALSE,
results = TRUE, comment = "")
# knitr::asis_output("\\footnotesize")
# knitr::opts_chunk$set(echo=TRUE, eval=TRUE, cache=TRUE, message=FALSE, warning=FALSE, comment="")
library(knitr)
options(width=300)
knitr::opts_chunk$set(
fig.width = 10,
fig.height = 5,
fig.path='figures/',
fig.align = "center",
size = "tiny",
echo = TRUE, eval=TRUE,
warning = FALSE, message = FALSE,
results = TRUE, comment = "")
# knitr::asis_output("\\footnotesize")
source("https://bioconductor.org/biocLite.R")
if(!require("recount")){
biocLite("recount")
}
if(!require("DESeq2")){
install.packages("lazyeval")
install.packages("ggplot2")
biocLite("DESeq2")
}
if(!require("dismo")){
install.packages("dismo")
}
library("DESeq2")
if(!require("gplots")){
install.packages("gplots")
}
if (!require('gProfileR')) {
install.packages("gProfileR")
}
dir.util <- 'http://pedagogix-tagc.univ-mrs.fr/courses/statistics_bioinformatics/R-files/util/'
source(file.path(dir.util, "util_student_test_multi.R"))
library("recount")
library("gplots")
library("gProfileR")
library('knitr')
library('MASS')
library('dismo')
library('class')
project_id <- 'SRP041538'
download_study( project = project_id, type = 'rse-gene', download = T) # Télécharge les données
load("SRP041538/rse_gene.Rdata") # Charge les données dans R
data <- round(assays(rse_gene)$counts,0) # Permet de récupéré la table de count des données
pheno <- lapply(split(colData(rse_gene), seq_len(nrow(colData(rse_gene)))), geo_characteristics)
citation('recount')
unlink('C:/Users/missl/Downloads/Travail_personnel_Nin_Sebastien_cache', recursive = TRUE)
dir.util
unlink('C:/Users/missl/Downloads/Rapport_CHARRIAT_GUERET_ASG_cache', recursive = TRUE)
res.DESeq2.df <- na.omit(data.frame(res.DESeq2))
res.DES
res.DESeq2.df
res.DESeq2.df$padj
test <- res.DESeq2.df[order(res.DESeq2.df$padj)]
test <- res.DESeq2.df[order(res.DESeq2.df$padj),]
test
res.DESeq2.df <- na.omit(data.frame(res.DESeq2))
COPD.sign <- rownames(res.DESeq2.df)[res.DESeq2.df$log2FoldChange >= 2 &  res.DESeq2.df$padj < alpha]
COPD.sign <- substr(COPD.sign,1,15)
c
COPD.sign
download.file(https://biit.cs.ut.ee/gprofiler/gcocoa.cgi?organism=hsapiens&compare=1&query=ENSG00000069018%0AENSG00000094796%0AENSG00000101197%0AENSG00000106410%0AENSG00000116721%0AENSG00000116996%0AENSG00000127561%0AENSG00000129873%20%0AENSG00000132703%20%0AENSG00000146383%0AENSG00000147262%0AENSG00000149651%0AENSG00000155249%0AENSG00000162727%0AENSG00000163114%0AENSG00000165623%0AENSG00000167360%0AENSG00000169340%0AENSG00000171195%0AENSG00000176183%0AENSG00000176742%0AENSG00000176925%0AENSG00000177151%20%0AENSG00000177201%20%0AENSG00000178522%0AENSG00000178836%20%0AENSG00000179626%0AENSG00000181552%20%0AENSG00000182415%0AENSG00000182645%0AENSG00000182652%20%0AENSG00000183024%20%0AENSG00000185037%20%0AENSG00000185053%20%0AENSG00000185177%0AENSG00000186288%20%0AENSG00000186513%20%0AENSG00000186803%20%0AENSG00000187754%20%0AENSG00000187833%0AENSG00000188712%0AENSG00000196341%0AENSG00000196475%0AENSG00000197454%0AENSG00000197532%0AENSG00000198083%0AENSG00000203690%0AENSG00000203908%0AENSG00000203914%0AENSG00000204478%0AENSG00000204481%0AENSG00000204700%0AENSG00000204702%0AENSG00000204873%0AENSG00000204918%0AENSG00000205409%20%0AENSG00000205495%20%0AENSG00000205678%20%0AENSG00000213601%20%0AENSG00000213650%0AENSG00000213798%20%0AENSG00000214178%20%0AENSG00000214210%20%0AENSG00000214329%20%0AENSG00000214335%0AENSG00000215070%20%0AENSG00000216966%20%0AENSG00000217030%20%0AENSG00000223569%20%0AENSG00000223893%0AENSG00000223968%20%0AENSG00000224763%20%0AENSG00000224865%20%0AENSG00000225069%20%0AENSG00000226234%0AENSG00000226372%20%0AENSG00000227264%20%0AENSG00000227551%20%0AENSG00000228051%20%0AENSG00000228303%0AENSG00000230097%20%0AENSG00000230430%20%0AENSG00000230469%20%0AENSG00000230594%20%0AENSG00000231396%0AENSG00000231821%20%0AENSG00000232420%20%0AENSG00000232676%20%0AENSG00000233701%20%0AENSG00000233921%0AENSG00000234560%20%0AENSG00000234612%20%0AENSG00000234995%20%0AENSG00000235430%20%0AENSG00000235434%0AENSG00000236032%20%0AENSG00000236179%20%0AENSG00000237876%20%0AENSG00000238161%20%0AENSG00000238193%0AENSG00000239810%20%0AENSG00000240452%20%0AENSG00000240545%20%0AENSG00000241204%20%0AENSG00000242537%0AENSG00000242608%20%0AENSG00000243504%20%0AENSG00000243780%20%0AENSG00000244194%20%0AENSG00000248127%0AENSG00000248827%20%0AENSG00000249157%20%0AENSG00000249301%20%0AENSG00000249582%20%0AENSG00000250381%0AENSG00000250768%20%0AENSG00000254406%20%0AENSG00000254607%20%0AENSG00000254769%20%0AENSG00000255214%0AENSG00000256075%20%0AENSG00000257331%20%0AENSG00000257616%20%0AENSG00000258033%20%0AENSG00000258080%0AENSG00000258585%20%0AENSG00000259458%20%0AENSG00000259555%20%0AENSG00000260763%20%0AENSG00000260866%0AENSG00000260986%20%0AENSG00000261080%20%0AENSG00000261711%20%0AENSG00000262953%20%0AENSG00000263716%0AENSG00000267235%20%0AENSG00000267620%20%0AENSG00000267631%20%0AENSG00000268447%20%0AENSG00000268988%0AENSG00000269043%20%0AENSG00000269758%20%0AENSG00000270544%20%0AENSG00000270929%20%0AENSG00000273567%0AENSG00000273588%20%0AENSG00000277738%0AENSG00000278054%20%0AENSG00000279439%20%0AENSG00000279685%0AENSG00000280837%20%0AENSG00000283659%0A&significant=1&hierfiltering=&output=png&custbg_file=&custbg=&user_thr=1.00&min_set_size=0&max_set_size=0&min_isect_size=0&prefix=WIKIGENE_ACC&threshold_algo=analytical&domain_size_type=annotated&aresolve=&advanced_options_on=0&sf_GO=on&sf_GO:BP=on&sf_GO:CC=on&sf_GO:MF=on&sf_KEGG=on&sf_REAC=on&sf_TF=on&sf_MI=on&sf_HPA=on&sf_CORUM=on&sf_HP=on&sf_BIOGRID=on)
download.file('https://biit.cs.ut.ee/gprofiler/gcocoa.cgi?organism=hsapiens&compare=1&query=ENSG00000069018%0AENSG00000094796%0AENSG00000101197%0AENSG00000106410%0AENSG00000116721%0AENSG00000116996%0AENSG00000127561%0AENSG00000129873%20%0AENSG00000132703%20%0AENSG00000146383%0AENSG00000147262%0AENSG00000149651%0AENSG00000155249%0AENSG00000162727%0AENSG00000163114%0AENSG00000165623%0AENSG00000167360%0AENSG00000169340%0AENSG00000171195%0AENSG00000176183%0AENSG00000176742%0AENSG00000176925%0AENSG00000177151%20%0AENSG00000177201%20%0AENSG00000178522%0AENSG00000178836%20%0AENSG00000179626%0AENSG00000181552%20%0AENSG00000182415%0AENSG00000182645%0AENSG00000182652%20%0AENSG00000183024%20%0AENSG00000185037%20%0AENSG00000185053%20%0AENSG00000185177%0AENSG00000186288%20%0AENSG00000186513%20%0AENSG00000186803%20%0AENSG00000187754%20%0AENSG00000187833%0AENSG00000188712%0AENSG00000196341%0AENSG00000196475%0AENSG00000197454%0AENSG00000197532%0AENSG00000198083%0AENSG00000203690%0AENSG00000203908%0AENSG00000203914%0AENSG00000204478%0AENSG00000204481%0AENSG00000204700%0AENSG00000204702%0AENSG00000204873%0AENSG00000204918%0AENSG00000205409%20%0AENSG00000205495%20%0AENSG00000205678%20%0AENSG00000213601%20%0AENSG00000213650%0AENSG00000213798%20%0AENSG00000214178%20%0AENSG00000214210%20%0AENSG00000214329%20%0AENSG00000214335%0AENSG00000215070%20%0AENSG00000216966%20%0AENSG00000217030%20%0AENSG00000223569%20%0AENSG00000223893%0AENSG00000223968%20%0AENSG00000224763%20%0AENSG00000224865%20%0AENSG00000225069%20%0AENSG00000226234%0AENSG00000226372%20%0AENSG00000227264%20%0AENSG00000227551%20%0AENSG00000228051%20%0AENSG00000228303%0AENSG00000230097%20%0AENSG00000230430%20%0AENSG00000230469%20%0AENSG00000230594%20%0AENSG00000231396%0AENSG00000231821%20%0AENSG00000232420%20%0AENSG00000232676%20%0AENSG00000233701%20%0AENSG00000233921%0AENSG00000234560%20%0AENSG00000234612%20%0AENSG00000234995%20%0AENSG00000235430%20%0AENSG00000235434%0AENSG00000236032%20%0AENSG00000236179%20%0AENSG00000237876%20%0AENSG00000238161%20%0AENSG00000238193%0AENSG00000239810%20%0AENSG00000240452%20%0AENSG00000240545%20%0AENSG00000241204%20%0AENSG00000242537%0AENSG00000242608%20%0AENSG00000243504%20%0AENSG00000243780%20%0AENSG00000244194%20%0AENSG00000248127%0AENSG00000248827%20%0AENSG00000249157%20%0AENSG00000249301%20%0AENSG00000249582%20%0AENSG00000250381%0AENSG00000250768%20%0AENSG00000254406%20%0AENSG00000254607%20%0AENSG00000254769%20%0AENSG00000255214%0AENSG00000256075%20%0AENSG00000257331%20%0AENSG00000257616%20%0AENSG00000258033%20%0AENSG00000258080%0AENSG00000258585%20%0AENSG00000259458%20%0AENSG00000259555%20%0AENSG00000260763%20%0AENSG00000260866%0AENSG00000260986%20%0AENSG00000261080%20%0AENSG00000261711%20%0AENSG00000262953%20%0AENSG00000263716%0AENSG00000267235%20%0AENSG00000267620%20%0AENSG00000267631%20%0AENSG00000268447%20%0AENSG00000268988%0AENSG00000269043%20%0AENSG00000269758%20%0AENSG00000270544%20%0AENSG00000270929%20%0AENSG00000273567%0AENSG00000273588%20%0AENSG00000277738%0AENSG00000278054%20%0AENSG00000279439%20%0AENSG00000279685%0AENSG00000280837%20%0AENSG00000283659%0A&significant=1&hierfiltering=&output=png&custbg_file=&custbg=&user_thr=1.00&min_set_size=0&max_set_size=0&min_isect_size=0&prefix=WIKIGENE_ACC&threshold_algo=analytical&domain_size_type=annotated&aresolve=&advanced_options_on=0&sf_GO=on&sf_GO:BP=on&sf_GO:CC=on&sf_GO:MF=on&sf_KEGG=on&sf_REAC=on&sf_TF=on&sf_MI=on&sf_HPA=on&sf_CORUM=on&sf_HP=on&sf_BIOGRID=on)
''
)
az
f
c
)
'
download.file('https://biit.cs.ut.ee/gprofiler/gcocoa.cgi?organism=hsapiens&compare=1&query=ENSG00000069018%0AENSG00000094796%0AENSG00000101197%0AENSG00000106410%0AENSG00000116721%0AENSG00000116996%0AENSG00000127561%0AENSG00000129873%20%0AENSG00000132703%20%0AENSG00000146383%0AENSG00000147262%0AENSG00000149651%0AENSG00000155249%0AENSG00000162727%0AENSG00000163114%0AENSG00000165623%0AENSG00000167360%0AENSG00000169340%0AENSG00000171195%0AENSG00000176183%0AENSG00000176742%0AENSG00000176925%0AENSG00000177151%20%0AENSG00000177201%20%0AENSG00000178522%0AENSG00000178836%20%0AENSG00000179626%0AENSG00000181552%20%0AENSG00000182415%0AENSG00000182645%0AENSG00000182652%20%0AENSG00000183024%20%0AENSG00000185037%20%0AENSG00000185053%20%0AENSG00000185177%0AENSG00000186288%20%0AENSG00000186513%20%0AENSG00000186803%20%0AENSG00000187754%20%0AENSG00000187833%0AENSG00000188712%0AENSG00000196341%0AENSG00000196475%0AENSG00000197454%0AENSG00000197532%0AENSG00000198083%0AENSG00000203690%0AENSG00000203908%0AENSG00000203914%0AENSG00000204478%0AENSG00000204481%0AENSG00000204700%0AENSG00000204702%0AENSG00000204873%0AENSG00000204918%0AENSG00000205409%20%0AENSG00000205495%20%0AENSG00000205678%20%0AENSG00000213601%20%0AENSG00000213650%0AENSG00000213798%20%0AENSG00000214178%20%0AENSG00000214210%20%0AENSG00000214329%20%0AENSG00000214335%0AENSG00000215070%20%0AENSG00000216966%20%0AENSG00000217030%20%0AENSG00000223569%20%0AENSG00000223893%0AENSG00000223968%20%0AENSG00000224763%20%0AENSG00000224865%20%0AENSG00000225069%20%0AENSG00000226234%0AENSG00000226372%20%0AENSG00000227264%20%0AENSG00000227551%20%0AENSG00000228051%20%0AENSG00000228303%0AENSG00000230097%20%0AENSG00000230430%20%0AENSG00000230469%20%0AENSG00000230594%20%0AENSG00000231396%0AENSG00000231821%20%0AENSG00000232420%20%0AENSG00000232676%20%0AENSG00000233701%20%0AENSG00000233921%0AENSG00000234560%20%0AENSG00000234612%20%0AENSG00000234995%20%0AENSG00000235430%20%0AENSG00000235434%0AENSG00000236032%20%0AENSG00000236179%20%0AENSG00000237876%20%0AENSG00000238161%20%0AENSG00000238193%0AENSG00000239810%20%0AENSG00000240452%20%0AENSG00000240545%20%0AENSG00000241204%20%0AENSG00000242537%0AENSG00000242608%20%0AENSG00000243504%20%0AENSG00000243780%20%0AENSG00000244194%20%0AENSG00000248127%0AENSG00000248827%20%0AENSG00000249157%20%0AENSG00000249301%20%0AENSG00000249582%20%0AENSG00000250381%0AENSG00000250768%20%0AENSG00000254406%20%0AENSG00000254607%20%0AENSG00000254769%20%0AENSG00000255214%0AENSG00000256075%20%0AENSG00000257331%20%0AENSG00000257616%20%0AENSG00000258033%20%0AENSG00000258080%0AENSG00000258585%20%0AENSG00000259458%20%0AENSG00000259555%20%0AENSG00000260763%20%0AENSG00000260866%0AENSG00000260986%20%0AENSG00000261080%20%0AENSG00000261711%20%0AENSG00000262953%20%0AENSG00000263716%0AENSG00000267235%20%0AENSG00000267620%20%0AENSG00000267631%20%0AENSG00000268447%20%0AENSG00000268988%0AENSG00000269043%20%0AENSG00000269758%20%0AENSG00000270544%20%0AENSG00000270929%20%0AENSG00000273567%0AENSG00000273588%20%0AENSG00000277738%0AENSG00000278054%20%0AENSG00000279439%20%0AENSG00000279685%0AENSG00000280837%20%0AENSG00000283659%0A&significant=1&hierfiltering=&output=png&custbg_file=&custbg=&user_thr=1.00&min_set_size=0&max_set_size=0&min_isect_size=0&prefix=WIKIGENE_ACC&threshold_algo=analytical&domain_size_type=annotated&aresolve=&advanced_options_on=0&sf_GO=on&sf_GO:BP=on&sf_GO:CC=on&sf_GO:MF=on&sf_KEGG=on&sf_REAC=on&sf_TF=on&sf_MI=on&sf_HPA=on&sf_CORUM=on&sf_HP=on&sf_BIOGRID=on')
View(pheno)
knitr::opts_chunk$set(echo = TRUE)
source("http://bioconductor.org/biocLite.R")
biocLite( "affy" )
biocLite( c( "hgu133plus2cdf", "simpleaffy", "limma") )
source("http://bioconductor.org/biocLite.R")
if(!require("affy"))
{
biocLite( "affy" )
}
if(!require("hgu133plus2cdf"))
{
biocLite( "hgu133plus2cdf" )
}
if(!require("simpleaffy"))
{
biocLite( "simpleaffy" )
}
if(!require("limma"))
{
biocLite( "limma" )
}
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
Data <- ReadAffy()
Data
sampleNames(Data)
sampleNames(Data) <- c("1-expo", "2-expo", "1-apExpo", "2-apExpo")
sampleNames(Data)
# Pour un ordi peu puissant
# image(Data[,1])
# image(Data[,2])
# image(Data[,3])
# image(Data[,4])
# Pour un ordi puissant
par(mfrow=c(2,2))
image(Data)
# Appliquée à un objet Affybatch, la fonction hist renvoie un graphique un peu différent de d'habitude...
# histoire de nous faciliter la tâche!
# Remarquez que l'échelle des intensités est en log (base 2)
# voir plus bas comment faire pour obtenir le même genre de graphique avec les fonctions usuelles de R
hist(Data, main="Distribution des intensités des sondes")
boxplot(Data,main="Distribution des intensités des sondes")
class( pm(Data) )
dim( pm(Data) )
dim( mm(Data) )
quantile( pm(Data) )
quantile( log2(pm(Data)) )
plot(density( log2(mm(Data[,1]))) ,
main= "Distribution du signal des sondes\n PM (trait plein) et MM (pointillé)",
col="lightblue", lty=2)
lines(density( log2(mm(Data[,2]))) , col="lightblue", lty=2)
lines(density( log2(mm(Data[,3]))) , col="lightblue", lty=2)
lines(density( log2(mm(Data[,4]))) , col="lightblue", lty=2)
lines(density( log2(pm(Data[,1]))) , col="blue")
lines(density( log2(pm(Data[,2]))) , col="blue")
lines(density( log2(pm(Data[,3]))) , col="blue")
lines(density( log2(pm(Data[,4]))) , col="blue")
boxplot( cbind( log2(pm(Data)), log2(mm(Data)) )[,c(1,5,2,6,3,7,4,8)],
main="Distribution des sondes \nPM (bleu) et MM (bleu clair)",
col=c("blue", "lightblue"),
names=paste( rep(sampleNames(Data), each=2), c("pm","mm"), sep="."))
# nuage de points entre sondes PM et MM
par(mfrow=c(2,2))
plot(log2(pm(Data[,1])), log2(mm(Data[,1])),
main="Relation PM / MM pour la puce 1-expo",
col=rgb(0,0,100,50, maxColorValue=255),
pch='.')
abline(a=0, b=1, col="red")
plot(log2(pm(Data[,2])), log2(mm(Data[,2])),
main="Relation PM / MM pour la puce 2-expo",
col=rgb(0,0,100,50, maxColorValue=255),
pch='.')
abline(a=0, b=1, col="red")
plot(log2(pm(Data[,3])), log2(mm(Data[,3])),
main="Relation PM / MM pour la puce 1-apExpo",
col=rgb(0,0,100,50, maxColorValue=255),
pch='.')
abline(a=0, b=1, col="red")
plot(log2(pm(Data[,4])), log2(mm(Data[,4])),
main="Relation PM / MM pour la puce 2-apExpo",
col=rgb(0,0,100,50, maxColorValue=255),
pch='.')
abline(a=0, b=1, col="red")
# nuage de points entre sondes PM et MM
par(mfrow=c(2,2))
plot(log2(pm(Data[,1])), log2(mm(Data[,1])),
main="Relation PM / MM pour la puce 1-expo",
col=rgb(0,0,100,50, maxColorValue=255),
pch='.', xlab="PM", ylab="MM")
abline(a=0, b=1, col="red")
plot(log2(pm(Data[,2])), log2(mm(Data[,2])),
main="Relation PM / MM pour la puce 2-expo",
col=rgb(0,0,100,50, maxColorValue=255),
pch='.', xlab="PM", ylab="MM")
abline(a=0, b=1, col="red")
plot(log2(pm(Data[,3])), log2(mm(Data[,3])),
main="Relation PM / MM pour la puce 1-apExpo",
col=rgb(0,0,100,50, maxColorValue=255),
pch='.', xlab="PM", ylab="MM")
abline(a=0, b=1, col="red")
plot(log2(pm(Data[,4])), log2(mm(Data[,4])),
main="Relation PM / MM pour la puce 2-apExpo",
col=rgb(0,0,100,50, maxColorValue=255),
pch='.', xlab="PM", ylab="MM")
abline(a=0, b=1, col="red")
# Affy degradation plot
RNAdeg <- AffyRNAdeg(Data)
plotAffyRNAdeg(RNAdeg)
eset.rma <- rma(Data)
eset.rma
# on extrait de l'objet ExpressionSet "eset.rma" la matrice des intensités normalisées par RMA
e.rma <- exprs(eset.rma)
e.rma[1:5,]
write.table(e.rma, file = "e.rma.txt", row.names=T, col.names=T, sep="\t",quote=F)
boxplot(e.rma,main="Distribution des intensités des sondes après normalisation")
plot(density( log2(e.rma[,1])) ,
main= "Distribution des expressions des gènes \n normalisation RMA",
col="blue", xlab="log2 Intensity", ylab="Density")
lines(density( log2(e.rma[,2])) , col="red")
lines(density( log2(e.rma[,3])) , col="darkgreen")
lines(density( log2(e.rma[,4])) , col="orange")
legend("topright", legend=c("i3", "Ni3", "i4", "Ni4"),
col=c("blue", "red", "darkgreen", "orange" ), lty=1)
plot(density( log2(e.rma[,1])) ,
main= "Distribution des expressions des gènes \n normalisation RMA",
col="blue", xlab="log2 Intensity", ylab="Density")
lines(density( log2(e.rma[,2])) , col="red")
lines(density( log2(e.rma[,3])) , col="darkgreen")
lines(density( log2(e.rma[,4])) , col="orange")
legend("topright", legend=c("1-expo", "2-expo", "1-apExpo", "2-apExpo"),
col=c("blue", "red", "darkgreen", "orange" ), lty=1)
par(mfrow=c(2,2))
plot(log2(e.rma[,1]), log2(e.rma[,3]),
main="1-expo_vs_1-apExpo", xlab="1-expo", ylab="1-apExpo", pch=20)
plot(log2(e.rma[,2]), log2(e.rma[,4]),
main="2-expo_vs_2-apExpo", xlab="2-expo", ylab="2-apExpo", pch=20)
plot(log2(e.rma[,1]), log2(e.rma[,2]),
main="1-expo_vs_2-expo", xlab="1-expo", ylab="2-expo", pch=20)
plot(log2(e.rma[,3]), log2(e.rma[,4]),
main="1-apExpo_vs_2-apExpo", xlab="1-apExpo", ylab="2-apExpo", pch=20)
quit()
install.packages("rPython")
library(rPython)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
df <- read.table('/Users/missl/Documents/Stage_UM-ISEM/SnpEff_last/NoStart_exo.txt', header = T, sep ='|')
df
View(df)
df <- df[2:nrow(df),]
df$chromosome
unlink('C:/Users/missl/Documents/Stage/Rstudio/Rapport de stage_iso_cache', recursive = TRUE)
setwd("C:/Users/missl/Documents/Stage/Rstudio")
unlink('Rapport de stage_iso_cache', recursive = TRUE)
=======
load("/media/sf_DATA/Stage/Rstudio/dd-RAD_simulation_digestions_cache/html/Installation des packages_331858f6f3167e8bdb33eba1cf75ac8a.RData")
load("/media/sf_DATA/Stage/Rstudio/dd-RAD_simulation_digestions_cache/html/Installation des packages_331858f6f3167e8bdb33eba1cf75ac8a.rdb")
FASTA.file <- "/home/elise.gueret/labrax.fa"
ref.DNAseq <- ref.DNAseq(FASTA.file, subselect.contigs = TRUE, prop.contigs = 0.1)
library("Biostrings", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("zlibbioc", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("ShortRead", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("SimRAD", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
FASTA.file <- "/home/elise.gueret/labrax.fa"
ref.DNAseq <- ref.DNAseq(FASTA.file, subselect.contigs = TRUE, prop.contigs = 0.1)
# PstI
cs_5p1 <- "CTGCA"
cs_3p1 <- "G"
# MseI
cs_5p2 <- "T"
cs_3p2 <- "TAA"
# EcoRI
cs_5p3 <- "G"
cs_3p3 <- "AATTC"
# MspI
cs_5p4 <- "C"
cs_3p4 <- "CGG"
simseq.dig1 <- insilico.digest(ref.DNAseq, cs_5p1, cs_3p1, cs_5p2, cs_3p2, verbose=TRUE)
simseq.sel1 <- adapt.select(simseq.dig1, type="AB+BA", cs_5p1, cs_3p1, cs_5p2, cs_3p2)
FASTA.file <- "/home/elise.gueret/labrax.fa"
ref.DNAseq <- ref.DNAseq(FASTA.file, subselect.contigs = TRUE, prop.contigs = 0.1)
# PstI
cs_5p1 <- "CTGCA"
cs_3p1 <- "G"
# MseI
cs_5p2 <- "T"
cs_3p2 <- "TAA"
# EcoRI
cs_5p3 <- "G"
cs_3p3 <- "AATTC"
# MspI
cs_5p4 <- "C"
cs_3p4 <- "CGG"
simseq.dig1 <- insilico.digest(ref.DNAseq, cs_5p1, cs_3p1, cs_5p2, cs_3p2, verbose=TRUE)
simseq.sel1 <- adapt.select(simseq.dig1, type="AB+BA", cs_5p1, cs_3p1, cs_5p2, cs_3p2)
wid.simseq1 <- size.select(simseq.sel1, min.size = 200, max.size = 400, graph=TRUE, verbose=TRUE)
nar.simseq1 <- size.select(simseq.sel1, min.size = 210, max.size = 260, graph=TRUE, verbose=TRUE)
boxplot(list(width(simseq.sel1), width(wid.simseq1), width(nar.simseq1)), names=c("All fragments",
"Wide size selection", "Narrow size selection"), ylab="Locus size (bp)")
simseq.dig2 <- insilico.digest(ref.DNAseq, cs_5p3, cs_3p3, cs_5p4, cs_3p4, verbose=TRUE)
simseq.sel2 <- adapt.select(simseq.dig2, type="AB+BA", cs_5p3, cs_3p3, cs_5p4, cs_3p4)
wid.simseq2 <- size.select(simseq.sel2, min.size = 200, max.size = 400, graph=TRUE, verbose=TRUE)
nar.simseq2 <- size.select(simseq.sel2, min.size = 210, max.size = 260, graph=TRUE, verbose=TRUE)
boxplot(list(width(simseq.sel2), width(wid.simseq2), width(nar.simseq2)), names=c("All fragments",
"Wide size selection", "Narrow size selection"), ylab="Locus size (bp)")
simseq.dig3 <- insilico.digest(ref.DNAseq, cs_5p3, cs_3p3, cs_5p2, cs_3p2, verbose=TRUE)
simseq.sel3 <- adapt.select(simseq.dig3, type="AB+BA", cs_5p3, cs_3p3, cs_5p2, cs_3p2)
wid.simseq3 <- size.select(simseq.sel3, min.size = 200, max.size = 400, graph=TRUE, verbose=TRUE)
nar.simseq3 <- size.select(simseq.sel3, min.size = 210, max.size = 260, graph=TRUE, verbose=TRUE)
boxplot(list(width(simseq.sel3), width(wid.simseq3), width(nar.simseq3)), names=c("All fragments",
"Wide size selection", "Narrow size selection"), ylab="Locus size (bp)")
simseq.dig4 <- insilico.digest(ref.DNAseq, cs_5p3, cs_3p3, cs_5p1, cs_3p1, verbose=TRUE)
simseq.sel4 <- adapt.select(simseq.dig4, type="AB+BA", cs_5p3, cs_3p3, cs_5p1, cs_3p1)
wid.simseq4 <- size.select(simseq.sel4, min.size = 200, max.size = 400, graph=TRUE, verbose=TRUE)
nar.simseq4 <- size.select(simseq.sel4, min.size = 210, max.size = 260, graph=TRUE, verbose=TRUE)
boxplot(list(width(simseq.sel4), width(wid.simseq4), width(nar.simseq4)), names=c("All fragments",
"Wide size selection", "Narrow size selection"), ylab="Locus size (bp)")
save.image("/media/sf_DATA/Stage/Rstudio/dd-RAD_simulation_digestions_Workspace.RData")
setwd("/media/sf_DATA/Stage/Rstudio")
install.packages("kableExtra")
install.packages("kableExtra", lib = "/home/elise.gueret/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("xml2")
install.packages("xml2")
install.packages("kableExtra")
install.packages("kableExtra")
install.packages("kableExtra")
install.packages("ggplot2")
>>>>>>> ab24cd204a64cff24ca595c0f142da35a9fb7dbd
